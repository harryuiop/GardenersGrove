import org.gradle.api.tasks.testing.logging.TestExceptionFormat

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'jacoco'
	id 'io.spring.dependency-management' version '1.1.4'
	id "org.sonarqube" version "3.5.0.2730"
}

group = 'team-400'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
}

configurations {
	cucumberRuntime {
		extendsFrom testImplementation
	}
}

dependencies {

	// Spring dependencies
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation "org.springframework.boot:spring-boot-starter-security"
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'com.h2database:h2'
	implementation 'org.webjars:bootstrap:5.3.2'
	implementation 'org.webjars.npm:bootstrap-icons:1.11.3'
	implementation 'org.mariadb.jdbc:mariadb-java-client:3.3.3'
	implementation 'org.webjars.npm:bootstrap-icons:1.11.3'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

	testImplementation 'junit:junit:4.13.1'
	testImplementation 'org.junit.platform:junit-platform-suite:1.10.2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'io.cucumber:cucumber-java:7.15.0'
	testImplementation 'io.cucumber:cucumber-junit-platform-engine:7.15.0'
	testImplementation 'io.cucumber:cucumber-spring:7.15.0'
}

jacoco {
	toolVersion = "0.8.9"
}

sonar {
	properties {
		property "sonar.projectKey", "seng302-2024-team400"
		property "sonar.qualitygate.wait", true
	}
}

tasks.named("check") {
	dependsOn test, integration, cucumber
}

tasks.named('test') {
	// Use JUnit Platform for unit tests.
	useJUnitPlatform()
	filter {
		includeTestsMatching "nz.ac.canterbury.seng302.gardenersgrove.unit.*"
	}
	testLogging {
		events "passed", "skipped", "failed", "standardOut", "standardError"
	}

	// The unitTestReport will be run after the unit test task has completed
	finalizedBy "unitTestReport"
}

tasks.register("integration", Test) {
	useJUnitPlatform()
	filter {
		includeTestsMatching "nz.ac.canterbury.seng302.gardenersgrove.integration.*"
	}
	testLogging {
		events "passed", "skipped", "failed", "standardOut", "standardError"
	}

	// The integrationTestReport will be run after the integration test task has completed
	finalizedBy "integrationTestReport"
}

tasks.register("cucumber", Test) {
	testLogging.showStandardStreams = true
	useJUnitPlatform()
	filter {
		// Ensure this lines up with the package your cucumber tests are located in
		includeTestsMatching "nz.ac.canterbury.seng302.gardenersgrove.cucumber.*"
	}
	testLogging {
		events "passed", "skipped", "failed", "standardOut", "standardError"
		exceptionFormat TestExceptionFormat.FULL
	}

	// The cucumberTestReport will be run after the cucumber test task has completed
	finalizedBy "cucumberTestReport"
}

tasks.register("unitTestReport", JacocoReport) { // Generate a report for unit tests
	group = 'verification'

	onlyIf { // Allow the report to be skipped when -PskipTestReport is passed via commandline
		return !project.hasProperty('skipTestReport')
	}

	dependsOn test

	executionData project.tasks.test

	sourceDirectories.setFrom(project.files(project.sourceSets.main.allSource.srcDirs))
	classDirectories.setFrom(project.sourceSets.main.output)

	reports {
		// The jacoco coverage report will ge generated in the destination below
		html.destination file("${buildDir}/reports/coverage/test")
	}
}

tasks.register("integrationTestReport", JacocoReport) { // Generate a report for integration tests
	group = 'verification'

	onlyIf { // Allow the report to be skipped when -PskipTestReport is passed via commandline
		return !project.hasProperty('skipTestReport')
	}

	dependsOn integration

	executionData project.tasks.integration

	sourceDirectories.setFrom(project.files(project.sourceSets.main.allSource.srcDirs))
	classDirectories.setFrom(project.sourceSets.main.output)

	reports {
		// The jacoco coverage report will ge generated in the destination below
		html.destination file("${buildDir}/reports/coverage/integration")
	}
}

tasks.register("cucumberTestReport", JacocoReport) { // Generate a report for cucumber tests
	group = 'verification'

	onlyIf { // Allow the report to be skipped when -PskipTestReport is passed via commandline
		return !project.hasProperty('skipTestReport')
	}

	dependsOn cucumber

	executionData project.tasks.cucumber

	sourceDirectories.setFrom(project.files(project.sourceSets.main.allSource.srcDirs))
	classDirectories.setFrom(project.sourceSets.main.output)

	reports {
		// The jacoco coverage report will ge generated in the destination below
		html.destination file("${buildDir}/reports/coverage/cucumber")
	}
}

jacocoTestReport { // Generate a report for all generated test data
	onlyIf { // Allow the report to be skipped when -PskipTestReport is passed via commandline
		return !project.hasProperty('skipTestReport')
	}

	mustRunAfter test, integration, cucumber

	executionData fileTree(project.rootDir) {
		include '**/*.exec'
	}
	reports {
		html.destination file("${buildDir}/reports/coverage/overall")
	}
}

// Ensure jacocoTestReport is ran after each specific test report.
// The 'overall' coverage will then include each of the test tasks ran.
tasks.named("unitTestReport").configure { finalizedBy "jacocoTestReport" }
tasks.named("integrationTestReport").configure { finalizedBy "jacocoTestReport" }
tasks.named("cucumberTestReport").configure { finalizedBy "jacocoTestReport" }
