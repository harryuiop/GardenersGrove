stages:
  - tagChecking
  - build
  - test
  - sonarqube
  - deploy

tag-checker:
  stage: tagChecking
  script:
    - python3 tag_checker.py $CI_COMMIT_TAG
  only:
    - tags

junit:
  stage: test
  script:
    - export SPRING_MAIL_USERNAME=$SPRING_MAIL_USERNAME
    - export SPRING_MAIL_PASSWORD=$SPRING_MAIL_PASSWORD
    - export MAPTILER_API_KEY=$MAPTILER_API_KEY
    - ./gradlew test integration cucumber
    - ls ./build/jacoco
    # TODO: when configuring SonarQube to show code coverage in tests, you will need to add some lines here
    # that keep the coverage report files generated by this job so that they can be uploaded to SonarQube
  artifacts:
    paths:
      - build/jacoco/test-report.xml

# builds all branches, except dev and main
branch-build:
  stage: build
  script:
    - ./gradlew bootJar
  artifacts:
    paths:
      - build/libs
  except:
    - tags
    - main
    - dev

deploy-staging:
  stage: deploy
  script:
    - ./gradlew bootJar
    - rm -rf /home/gitlab-runner/staging/ || true
    - mkdir /home/gitlab-runner/staging/
    - cp -r ./build/libs /home/gitlab-runner/staging
    - cp runner-scripts/staging.sh /home/gitlab-runner/staging.sh
    - chmod u+x /home/gitlab-runner/staging.sh
    - echo "export DB_USERNAME=${DB_USERNAME}" > /home/gitlab-runner/staging/.env
    - echo "export DB_PASSWORD=${DB_PASSWORD}" >> /home/gitlab-runner/staging/.env
    - echo "export DB_URL=${DB_URL_TEST}" >> /home/gitlab-runner/staging/.env
    - echo "export BASE_URL=${TEST_ORIGIN_URL}" >> /home/gitlab-runner/staging/.env
    - echo "export MAPTILER_API_KEY=${MAPTILER_API_KEY}" >> /home/gitlab-runner/staging/.env
    - echo "export SPRING_MAIL_USERNAME=${SPRING_MAIL_USERNAME}" >> /home/gitlab-runner/staging/.env
    - echo "export SPRING_MAIL_PASSWORD=${SPRING_MAIL_PASSWORD}" >> /home/gitlab-runner/staging/.env
    - sudo systemctl restart staging
  artifacts:
    paths:
      - build/libs
  only:
    - dev

deploy-production:
  stage: deploy
  script:
    - ./gradlew bootJar
    - rm -rf /home/gitlab-runner/production/ || true
    - mkdir /home/gitlab-runner/production/
    - cp -r ./build/libs /home/gitlab-runner/production
    - cp runner-scripts/production.sh /home/gitlab-runner/production.sh
    - chmod u+x /home/gitlab-runner/production.sh
    - echo "export DB_USERNAME=${DB_USERNAME}" > /home/gitlab-runner/production/.env
    - echo "export DB_PASSWORD=${DB_PASSWORD}" >> /home/gitlab-runner/production/.env
    - echo "export DB_URL=${DB_URL_PROD}" >> /home/gitlab-runner/production/.env
    - echo "export BASE_URL=${PROD_ORIGIN_URL}" >> /home/gitlab-runner/production/.env
    - echo "export MAPTILER_API_KEY=${MAPTILER_API_KEY}" >> /home/gitlab-runner/production/.env
    - echo "export SPRING_MAIL_USERNAME=${SPRING_MAIL_USERNAME}" >> /home/gitlab-runner/production/.env
    - echo "export SPRING_MAIL_PASSWORD=${SPRING_MAIL_PASSWORD}" >> /home/gitlab-runner/production/.env
    - sudo systemctl restart production
  artifacts:
    paths:
      - build/libs
  only:
    - tags

sonarqube-check:
  image: gradle:jre11-slim
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: ./gradlew sonar
  allow_failure: true
  only:
    - merge_requests
    - main
    - dev

sonarqube-report:
    stage: sonarqube
    script:
      ./gradlew sonarqube

