package nz.ac.canterbury.seng302.gardenersgrove.controller;

import nz.ac.canterbury.seng302.gardenersgrove.components.GardensSidebar;
import nz.ac.canterbury.seng302.gardenersgrove.controller.validation.ErrorChecker;
import nz.ac.canterbury.seng302.gardenersgrove.entity.Garden;
import nz.ac.canterbury.seng302.gardenersgrove.entity.Location;
import nz.ac.canterbury.seng302.gardenersgrove.location.CountryCode;
import nz.ac.canterbury.seng302.gardenersgrove.location.map_tiler_response.Feature;
import nz.ac.canterbury.seng302.gardenersgrove.location.MapTilerGeocoding;
import nz.ac.canterbury.seng302.gardenersgrove.service.GardenService;
import nz.ac.canterbury.seng302.gardenersgrove.service.UserService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.Map;

/**
 * Controller for garden form. For creating new gardens.
 * Note the @link{Autowired} annotation giving us access to the @link{FormService} class automatically
 */
@Controller
public class GardenFormController extends GardensSidebar {
    Logger logger = LoggerFactory.getLogger(GardenFormController.class);
    private final GardenService gardenService;
    private final UserService userService;
    private final ErrorChecker Validator;

    @Autowired
    public GardenFormController(GardenService gardenService, UserService userService) {
        this.gardenService = gardenService;
        this.userService = userService;
        this.Validator = new ErrorChecker();
    }

    /**
     * Gets form to be displayed, and passes previous form values to the HTML.
     * @param model object that passes data through to the HTML.
     * @return thymeleaf HTML gardenForm template.
     */
    @GetMapping("/gardenform")
    public String form(Model model) {
        logger.info("GET /form");
        this.updateGardensSidebar(model, gardenService, userService);
        model.addAttribute("gardenNameError", "");
        model.addAttribute("gardenLocationError", "");
        model.addAttribute("gardenSizeError", "");
        return "gardenForm";
    }


    /**
     * Submits form and saves the garden to the database.
     * @param gardenName The name of the garden as input by the user.
     * @param gardenSize The size of the garden as input by the user.
     * @param country Country of Garden as input from user.
     * @param city City of Garden as input from user.
     * @param streetAddress Street Address (Street with optional number) as input from user.
     * @param suburb Suburb of Garden as input from user or autogenerated from street address.
     * @param postcode Postcode of Garden as input from user or autogenerated from street address.
     * @param model object that passes data through to the HTML.
     * @return thymeleaf HTML template to redirect to.
     */
    @PostMapping("/gardenform")
    public String submitForm(@RequestParam(name = "gardenName") String gardenName,
                             @RequestParam(name = "gardenSize", required = false) Float gardenSize,
                             @RequestParam(name = "country") String country,
                             @RequestParam(name = "city") String city,
                             @RequestParam(name = "streetAddress", required = false) String streetAddress,
                             @RequestParam(name = "suburb", required = false) String suburb,
                             @RequestParam(name = "postcode", required = false) String postcode,
                             Model model) {
        logger.info("POST /form");
        // This needs the gardenLocation removed
        Map<String, String> errors = Validator.gardenFormErrors(gardenName, "g", gardenSize);
        if (errors.isEmpty()) {

            // *********************** THE THINKING  ********************* //
            // Whatever is submitted through the form is what is sent to the database
            // Still need to call API here to get coordinates to store in database (DONE)
            // Javascript/HTML will handle autocomplete and auto-filled text
            // can use Java's built-in Nashorn JavaScript engine
            // Need to show nice error message if location is not found with API (per ACs)

            // ******** Get Location Response and save to db ********** //
            MapTilerGeocoding mapTilerGeocoding = new MapTilerGeocoding();
            // Country code allows more accurate searching by filtering by just that country
            String countryCode = CountryCode.getAlphaTwoCountryCodeFromName(country);
            Location location = new Location(country, city);
            Feature locationFeature;
            if (streetAddress != null) {
                locationFeature = mapTilerGeocoding.getFirstSearchResult(streetAddress, countryCode);
            } else {
                locationFeature = mapTilerGeocoding.getFirstSearchResult("", countryCode);
            }
            location.setLngLat(locationFeature.getCenter());
            // TODO Update text fields if necessary (Javascript?)
            // TODO Send other relevant info to database
            // TODO Fix testing AND DO testing
            Garden garden = new Garden(gardenName, location, gardenSize);
            gardenService.saveGarden(garden);
            return "redirect:/view-garden?gardenId=" + garden.getId();
        }
        else {
            this.updateGardensSidebar(model, gardenService, userService);
            for (Map.Entry<String, String> error : errors.entrySet()) {
                model.addAttribute(error.getKey(), error.getValue());
            }
            model.addAttribute("gardenName", gardenName);
            model.addAttribute("gardenLocation", "g"); // Also needing removal
            model.addAttribute("gardenSize", gardenSize);
            return "gardenForm";
        }
    }
}
